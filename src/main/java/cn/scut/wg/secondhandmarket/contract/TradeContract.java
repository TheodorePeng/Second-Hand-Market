package cn.scut.wg.secondhandmarket.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.channel.client.TransactionSucCallback;
import org.fisco.bcos.channel.event.filter.EventLogPushWithDecodeCallback;
import org.fisco.bcos.web3j.abi.EventEncoder;
import org.fisco.bcos.web3j.abi.FunctionReturnDecoder;
import org.fisco.bcos.web3j.abi.TypeReference;
import org.fisco.bcos.web3j.abi.datatypes.Bool;
import org.fisco.bcos.web3j.abi.datatypes.Event;
import org.fisco.bcos.web3j.abi.datatypes.Function;
import org.fisco.bcos.web3j.abi.datatypes.Type;
import org.fisco.bcos.web3j.abi.datatypes.Utf8String;
import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.RemoteCall;
import org.fisco.bcos.web3j.protocol.core.methods.response.Log;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tuples.generated.Tuple1;
import org.fisco.bcos.web3j.tuples.generated.Tuple2;
import org.fisco.bcos.web3j.tuples.generated.Tuple5;
import org.fisco.bcos.web3j.tuples.generated.Tuple8;
import org.fisco.bcos.web3j.tx.Contract;
import org.fisco.bcos.web3j.tx.TransactionManager;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;
import org.fisco.bcos.web3j.tx.txdecode.TransactionDecoder;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version none.
 */
@SuppressWarnings("unchecked")
public class TradeContract extends Contract {
    public static final String[] BINARY_ARRAY = {"","","","","","505050505092915050565b60008060008060606000809450614e2a616a07565b93506001600054016000819055508373ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015614e9c57600080fd5b505af1158015614eb0573d6000803e3d6000fd5b505050506040513d6020811015614ec657600080fd5b81019080805190602001909291905050509250614ee46000546168b0565b91508273ffffffffffffffffffffffffffffffffffffffff1663e942b5166040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260088152602001807f6964656e74697479000000000000000000000000000000000000000000000000815250602001838103825260058152602001807f747261646500000000000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b158015614fbf57600080fd5b505af1158015614fd3573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663e942b516836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260038152602001807f7469640000000000000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b8381101561509757808201518184015260208101905061507c565b50505050905090810190601f1680156150c45780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b1580156150e457600080fd5b505af11580156150f8573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663e942b5168c6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001806020018381038352600c8152602001807f73656c6c757365726e616d650000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b838110156151bc5780820151818401526020810190506151a1565b50505050905090810190601f1680156151e95780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561520957600080fd5b505af115801561521d573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663e942b5166040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001806020018381038352600b8152602001807f627579757365726e616d65000000000000000000000000000000000000000000815250602001838103825260028152602001807f232300000000000000000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b1580156152fa57600080fd5b505af115801561530e573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663e942b5168b6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260048152602001807f6e616d6500000000000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b838110156153d25780820151818401526020810190506153b7565b50505050905090810190601f1680156153ff5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561541f57600080fd5b505af1158015615433573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663e942b5168a6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001806020018381038352600b8152602001807f6465736372697074696f6e000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b838110156154f75780820151818401526020810190506154dc565b50505050905090810190601f1680156155245780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561554457600080fd5b505af1158015615558573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16632ef8ba74896040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260058152602001807f707269636500000000000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b15801561560457600080fd5b505af1158015615618573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663e942b516886040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260078152602001807f6669677061746800000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b838110156156dc5780820151818401526020810190506156c1565b50505050905090810190601f1680156157095780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561572957600080fd5b505af115801561573d573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16632ef8ba7460006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260068152602001807f737461747573000000000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b1580156157ea57600080fd5b505af11580156157fe573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff166331afac36846040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825260058152602001807f747261646500000000000000000000000000000000000000000000000000000081525060200192505050602060405180830381600087803b1580156158d657600080fd5b505af11580156158ea573d6000803e3d6000fd5b505050506040513d602081101561590057600080fd5b8101908080519060200190929190505050905060018114156159255760009450615949565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff94505b7f49ebfdac92fc3d51e1cf5eac4321bebaf32557ca0e092161b6948d3ccfb63c53858c8c8c8c8c604051808781526020018060200180602001806020018681526020018060200185810385528a818151815260200191508051906020019080838360005b838110156159c85780820151818401526020810190506159ad565b50505050905090810190601f1680156159f55780820380516001836020036101000a031916815260200191505b50858103845289818151815260200191508051906020019080838360005b83811015615a2e578082015181840152602081019050615a13565b50505050905090810190601f168015615a5b5780820380516001836020036101000a031916815260200191505b50858103835288818151815260200191508051906020019080838360005b83811015615a94578082015181840152602081019050615a79565b50505050905090810190601f168015615ac15780820380516001836020036101000a031916815260200191505b50858103825286818151815260200191508051906020019080838360005b83811015615afa578082015181840152602081019050615adf565b50505050905090810190601f168015615b275780820380516001836020036101000a031916815260200191505b509a505050505050505050505060405180910390a1849550505050505095945050505050565b6000615b57616af6565b6000806000615b64616af6565b6000615b6e616af6565b615b76616a07565b95508573ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015615bdc57600080fd5b505af1158015615bf0573d6000803e3d6000fd5b505050506040513d6020811015615c0657600080fd5b810190808051906020019092919050505094508473ffffffffffffffffffffffffffffffffffffffff1663cd30a1d18a6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260038152602001807f7469640000000000000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b83811015615cd9578082015181840152602081019050615cbe565b50505050905090810190601f168015615d065780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015615d2657600080fd5b505af1158015615d3a573d6000803e3d6000fd5b505050508573ffffffffffffffffffffffffffffffffffffffff1663e8434e39866040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825260058152602001807f747261646500000000000000000000000000000000000000000000000000000081525060200192505050602060405180830381600087803b15801561","5e1257600080fd5b505af1158015615e26573d6000803e3d6000fd5b505050506040513d6020811015615e3c57600080fd5b810190808051906020019092919050505093508373ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015615eb357600080fd5b505af1158015615ec7573d6000803e3d6000fd5b505050506040513d6020811015615edd57600080fd5b810190808051906020019092919050505060001415615f24577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83819150975097506168a5565b8373ffffffffffffffffffffffffffffffffffffffff1663846719e060006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b158015615f9457600080fd5b505af1158015615fa8573d6000803e3d6000fd5b505050506040513d6020811015615fbe57600080fd5b810190808051906020019092919050505091508173ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260038152602001807f7469640000000000000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b15801561607157600080fd5b505af1158015616085573d6000803e3d6000fd5b505050506040513d602081101561609b57600080fd5b81019080805190602001909291905050508160000181815250508173ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252600c8152602001807f73656c6c757365726e616d650000000000000000000000000000000000000000815250602001915050600060405180830381600087803b15801561615557600080fd5b505af1158015616169573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561619357600080fd5b8101908080516401000000008111156161ab57600080fd5b828101905060208101848111156161c157600080fd5b81518560018202830111640100000000821117156161de57600080fd5b505092919050505081602001819052508173ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252600b8152602001807f627579757365726e616d65000000000000000000000000000000000000000000815250602001915050600060405180830381600087803b15801561628e57600080fd5b505af11580156162a2573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060208110156162cc57600080fd5b8101908080516401000000008111156162e457600080fd5b828101905060208101848111156162fa57600080fd5b815185600182028301116401000000008211171561631757600080fd5b505092919050505081604001819052508173ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260048152602001807f6e616d6500000000000000000000000000000000000000000000000000000000815250602001915050600060405180830381600087803b1580156163c757600080fd5b505af11580156163db573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561640557600080fd5b81019080805164010000000081111561641d57600080fd5b8281019050602081018481111561643357600080fd5b815185600182028301116401000000008211171561645057600080fd5b505092919050505081606001819052508173ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252600b8152602001807f6465736372697074696f6e000000000000000000000000000000000000000000815250602001915050600060405180830381600087803b15801561650057600080fd5b505af1158015616514573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561653e57600080fd5b81019080805164010000000081111561655657600080fd5b8281019050602081018481111561656c57600080fd5b815185600182028301116401000000008211171561658957600080fd5b505092919050505081608001819052508173ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260058152602001807f7072696365000000000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b15801561663957600080fd5b505af115801561664d573d6000803e3d6000fd5b505050506040513d602081101561666357600080fd5b81019080805190602001909291905050508160a00181815250508173ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260078152602001807f6669677061746800000000000000000000000000000000000000000000000000815250602001915050600060405180830381600087803b15801561671d57600080fd5b505af1158015616731573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561675b57600080fd5b81019080805164010000000081111561677357600080fd5b8281019050602081018481111561678957600080fd5b81518560018202830111640100000000821117156167a657600080fd5b50509291905050508160c001819052508173ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260068152602001807f7374617475730000000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b15801561685657600080fd5b505af115801561686a573d6000803e3d6000fd5b505050506040513d602081101561688057600080fd5b81019080805190602001909291905050508160e0018181525050600081819150975097505b505050505050915091565b606060008060606000808614156168fe576040805190810160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525094506169fe565b8593505b600084141515616928578280600101935050600a8481151561692057fe5b059350616902565b826040519080825280601f01601f19166020018201604052801561695b5781602001602082028038833980820191505090505b5091506001830390505b6000861415156169fa57600a8681151561697b57fe5b076030017f0100000000000000000000000000000000000000000000000000000000000000028282806001900393508151811015156169b657fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a868115156169f257fe5b059550616965565b8194505b50505050919050565b600080600061100191508173ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260088152602001807f745f747261646573000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b158015616ab157600080fd5b505af1158015616ac5573d6000803e3d6000fd5b505050506040513d6020811015616adb57600080fd5b81019080805190602001909291905050509050809250505090565b61010060405190810160405280600081526020016060815260200160608152602001606081526020016060815260200160008152602001606081526020016000815250905600a165627a7a723058201962ec3cabb3e2f31df84cb09ca2bb1ed75931e7540e709ceb054cb06180e4650029"};

    public static final String BINARY = String.join("", BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"tid\",\"type\":\"string\"}],\"name\":\"printTrade\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tid\",\"type\":\"int256\"}],\"name\":\"deleteTrade\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tid\",\"type\":\"int256\"},{\"name\":\"sellusername\",\"type\":\"string\"},{\"name\":\"buyusername\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"price\",\"type\":\"int256\"},{\"name\":\"figpath\",\"type\":\"string\"},{\"name\":\"status\",\"type\":\"int256\"}],\"name\":\"updateTrade\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tid\",\"type\":\"int256\"}],\"name\":\"applyJudge\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tid\",\"type\":\"int256\"},{\"name\":\"buyusername\",\"type\":\"string\"}],\"name\":\"buyTrade\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tid\",\"type\":\"int256\"},{\"name\":\"pass\",\"type\":\"bool\"}],\"name\":\"judge\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sellusername\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"price\",\"type\":\"int256\"},{\"name\":\"figpath\",\"type\":\"string\"}],\"name\":\"newTrade\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"sellusername\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"figpath\",\"type\":\"string\"}],\"name\":\"NewTrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"tid\",\"type\":\"int256\"}],\"name\":\"UpdateTrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"tid\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"buyusername\",\"type\":\"string\"}],\"name\":\"BuyTrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"tid\",\"type\":\"int256\"}],\"name\":\"ApplyJudge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"tid\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"pass\",\"type\":\"bool\"}],\"name\":\"Judge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"tid\",\"type\":\"int256\"}],\"name\":\"DeleteTrade\",\"type\":\"event\"}]"};

    public static final String ABI = String.join("", ABI_ARRAY);

    public static final TransactionDecoder transactionDecoder = new TransactionDecoder(ABI, BINARY);

    public static final String FUNC_PRINTTRADE = "printTrade";

    public static final String FUNC_DELETETRADE = "deleteTrade";

    public static final String FUNC_UPDATETRADE = "updateTrade";

    public static final String FUNC_APPLYJUDGE = "applyJudge";

    public static final String FUNC_BUYTRADE = "buyTrade";

    public static final String FUNC_JUDGE = "judge";

    public static final String FUNC_NEWTRADE = "newTrade";

    public static final Event NEWTRADE_EVENT = new Event("NewTrade", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event UPDATETRADE_EVENT = new Event("UpdateTrade", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
    ;

    public static final Event BUYTRADE_EVENT = new Event("BuyTrade", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event APPLYJUDGE_EVENT = new Event("ApplyJudge", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
    ;

    public static final Event JUDGE_EVENT = new Event("Judge", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event DELETETRADE_EVENT = new Event("DeleteTrade", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
    ;

    @Deprecated
    protected TradeContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected TradeContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected TradeContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected TradeContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static TransactionDecoder getTransactionDecoder() {
        return transactionDecoder;
    }

    public RemoteCall<TransactionReceipt> printTrade(String tid) {
        final Function function = new Function(
                FUNC_PRINTTRADE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void printTrade(String tid, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_PRINTTRADE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(tid)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String printTradeSeq(String tid) {
        final Function function = new Function(
                FUNC_PRINTTRADE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<String> getPrintTradeInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_PRINTTRADE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple8<BigInteger, String, String, String, String, BigInteger, String, BigInteger> getPrintTradeOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_PRINTTRADE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple8<BigInteger, String, String, String, String, BigInteger, String, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (String) results.get(4).getValue(), 
                (BigInteger) results.get(5).getValue(), 
                (String) results.get(6).getValue(), 
                (BigInteger) results.get(7).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> deleteTrade(BigInteger tid) {
        final Function function = new Function(
                FUNC_DELETETRADE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void deleteTrade(BigInteger tid, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_DELETETRADE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String deleteTradeSeq(BigInteger tid) {
        final Function function = new Function(
                FUNC_DELETETRADE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<BigInteger> getDeleteTradeInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DELETETRADE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Tuple1<BigInteger> getDeleteTradeOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_DELETETRADE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> updateTrade(BigInteger tid, String sellusername, String buyusername, String name, String description, BigInteger price, String figpath, BigInteger status) {
        final Function function = new Function(
                FUNC_UPDATETRADE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(tid), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(sellusername), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(buyusername), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(description), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(price), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(figpath), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(status)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void updateTrade(BigInteger tid, String sellusername, String buyusername, String name, String description, BigInteger price, String figpath, BigInteger status, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_UPDATETRADE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(tid), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(sellusername), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(buyusername), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(description), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(price), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(figpath), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(status)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String updateTradeSeq(BigInteger tid, String sellusername, String buyusername, String name, String description, BigInteger price, String figpath, BigInteger status) {
        final Function function = new Function(
                FUNC_UPDATETRADE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(tid), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(sellusername), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(buyusername), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(description), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(price), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(figpath), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(status)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple8<BigInteger, String, String, String, String, BigInteger, String, BigInteger> getUpdateTradeInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATETRADE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple8<BigInteger, String, String, String, String, BigInteger, String, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (String) results.get(4).getValue(), 
                (BigInteger) results.get(5).getValue(), 
                (String) results.get(6).getValue(), 
                (BigInteger) results.get(7).getValue()
                );
    }

    public Tuple1<BigInteger> getUpdateTradeOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPDATETRADE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> applyJudge(BigInteger tid) {
        final Function function = new Function(
                FUNC_APPLYJUDGE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void applyJudge(BigInteger tid, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_APPLYJUDGE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String applyJudgeSeq(BigInteger tid) {
        final Function function = new Function(
                FUNC_APPLYJUDGE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<BigInteger> getApplyJudgeInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_APPLYJUDGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Tuple1<BigInteger> getApplyJudgeOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_APPLYJUDGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> buyTrade(BigInteger tid, String buyusername) {
        final Function function = new Function(
                FUNC_BUYTRADE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(tid), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(buyusername)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void buyTrade(BigInteger tid, String buyusername, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_BUYTRADE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(tid), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(buyusername)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String buyTradeSeq(BigInteger tid, String buyusername) {
        final Function function = new Function(
                FUNC_BUYTRADE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(tid), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(buyusername)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple2<BigInteger, String> getBuyTradeInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_BUYTRADE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple2<BigInteger, String>(

                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple1<BigInteger> getBuyTradeOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_BUYTRADE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> judge(BigInteger tid, Boolean pass) {
        final Function function = new Function(
                FUNC_JUDGE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(tid), 
                new org.fisco.bcos.web3j.abi.datatypes.Bool(pass)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void judge(BigInteger tid, Boolean pass, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_JUDGE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(tid), 
                new org.fisco.bcos.web3j.abi.datatypes.Bool(pass)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String judgeSeq(BigInteger tid, Boolean pass) {
        final Function function = new Function(
                FUNC_JUDGE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(tid), 
                new org.fisco.bcos.web3j.abi.datatypes.Bool(pass)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple2<BigInteger, Boolean> getJudgeInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_JUDGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple2<BigInteger, Boolean>(

                (BigInteger) results.get(0).getValue(), 
                (Boolean) results.get(1).getValue()
                );
    }

    public Tuple1<BigInteger> getJudgeOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_JUDGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> newTrade(String sellusername, String name, String description, BigInteger price, String figpath) {
        final Function function = new Function(
                FUNC_NEWTRADE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(sellusername), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(description), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(price), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(figpath)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void newTrade(String sellusername, String name, String description, BigInteger price, String figpath, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_NEWTRADE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(sellusername), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(description), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(price), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(figpath)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String newTradeSeq(String sellusername, String name, String description, BigInteger price, String figpath) {
        final Function function = new Function(
                FUNC_NEWTRADE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(sellusername), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(description), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(price), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(figpath)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple5<String, String, String, BigInteger, String> getNewTradeInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_NEWTRADE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple5<String, String, String, BigInteger, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (String) results.get(4).getValue()
                );
    }

    public Tuple1<BigInteger> getNewTradeOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_NEWTRADE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public List<NewTradeEventResponse> getNewTradeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWTRADE_EVENT, transactionReceipt);
        ArrayList<NewTradeEventResponse> responses = new ArrayList<NewTradeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewTradeEventResponse typedResponse = new NewTradeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.sellusername = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.name = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.description = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.price = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.figpath = (String) eventValues.getNonIndexedValues().get(5).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerNewTradeEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(NEWTRADE_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerNewTradeEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(NEWTRADE_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<UpdateTradeEventResponse> getUpdateTradeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATETRADE_EVENT, transactionReceipt);
        ArrayList<UpdateTradeEventResponse> responses = new ArrayList<UpdateTradeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UpdateTradeEventResponse typedResponse = new UpdateTradeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.tid = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerUpdateTradeEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(UPDATETRADE_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerUpdateTradeEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(UPDATETRADE_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<BuyTradeEventResponse> getBuyTradeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(BUYTRADE_EVENT, transactionReceipt);
        ArrayList<BuyTradeEventResponse> responses = new ArrayList<BuyTradeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BuyTradeEventResponse typedResponse = new BuyTradeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.tid = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.buyusername = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerBuyTradeEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(BUYTRADE_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerBuyTradeEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(BUYTRADE_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<ApplyJudgeEventResponse> getApplyJudgeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPLYJUDGE_EVENT, transactionReceipt);
        ArrayList<ApplyJudgeEventResponse> responses = new ArrayList<ApplyJudgeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApplyJudgeEventResponse typedResponse = new ApplyJudgeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.tid = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerApplyJudgeEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(APPLYJUDGE_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerApplyJudgeEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(APPLYJUDGE_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<JudgeEventResponse> getJudgeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(JUDGE_EVENT, transactionReceipt);
        ArrayList<JudgeEventResponse> responses = new ArrayList<JudgeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            JudgeEventResponse typedResponse = new JudgeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.tid = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.pass = (Boolean) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerJudgeEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(JUDGE_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerJudgeEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(JUDGE_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<DeleteTradeEventResponse> getDeleteTradeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DELETETRADE_EVENT, transactionReceipt);
        ArrayList<DeleteTradeEventResponse> responses = new ArrayList<DeleteTradeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DeleteTradeEventResponse typedResponse = new DeleteTradeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.tid = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerDeleteTradeEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(DELETETRADE_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerDeleteTradeEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(DELETETRADE_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    @Deprecated
    public static TradeContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new TradeContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static TradeContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new TradeContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static TradeContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new TradeContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static TradeContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new TradeContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<TradeContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(TradeContract.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<TradeContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(TradeContract.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<TradeContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(TradeContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<TradeContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(TradeContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class NewTradeEventResponse {
        public Log log;

        public BigInteger ret;

        public String sellusername;

        public String name;

        public String description;

        public BigInteger price;

        public String figpath;
    }

    public static class UpdateTradeEventResponse {
        public Log log;

        public BigInteger ret;

        public BigInteger tid;
    }

    public static class BuyTradeEventResponse {
        public Log log;

        public BigInteger ret;

        public BigInteger tid;

        public String buyusername;
    }

    public static class ApplyJudgeEventResponse {
        public Log log;

        public BigInteger ret;

        public BigInteger tid;
    }

    public static class JudgeEventResponse {
        public Log log;

        public BigInteger ret;

        public BigInteger tid;

        public Boolean pass;
    }

    public static class DeleteTradeEventResponse {
        public Log log;

        public BigInteger ret;

        public BigInteger tid;
    }
}
